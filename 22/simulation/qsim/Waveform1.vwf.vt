// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2022 18:39:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Isaev22
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Isaev22_vlg_sample_tst(
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	X0,
	X1,
	X2,
	sampler_tx
);
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  D7;
input  X0;
input  X1;
input  X2;
output sampler_tx;

reg sample;
time current_time;
always @(D0 or D1 or D2 or D3 or D4 or D5 or D6 or D7 or X0 or X1 or X2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Isaev22_vlg_check_tst (
	A0,
	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	A7,
	F,
	Y0,
	Y1,
	Y2,
	Y3,
	Y4,
	Y5,
	Y6,
	Y7,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  A4;
input  A5;
input  A6;
input  A7;
input  F;
input  Y0;
input  Y1;
input  Y2;
input  Y3;
input  Y4;
input  Y5;
input  Y6;
input  Y7;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  A3_expected;
reg  A4_expected;
reg  A5_expected;
reg  A6_expected;
reg  A7_expected;
reg  F_expected;
reg  Y0_expected;
reg  Y1_expected;
reg  Y2_expected;
reg  Y3_expected;
reg  Y4_expected;
reg  Y5_expected;
reg  Y6_expected;
reg  Y7_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  A3_prev;
reg  A4_prev;
reg  A5_prev;
reg  A6_prev;
reg  A7_prev;
reg  F_prev;
reg  Y0_prev;
reg  Y1_prev;
reg  Y2_prev;
reg  Y3_prev;
reg  Y4_prev;
reg  Y5_prev;
reg  Y6_prev;
reg  Y7_prev;

reg  F_expected_prev;

reg  last_F_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	A3_prev = A3;
	A4_prev = A4;
	A5_prev = A5;
	A6_prev = A6;
	A7_prev = A7;
	F_prev = F;
	Y0_prev = Y0;
	Y1_prev = Y1;
	Y2_prev = Y2;
	Y3_prev = Y3;
	Y4_prev = Y4;
	Y5_prev = Y5;
	Y6_prev = Y6;
	Y7_prev = Y7;
end

// update expected /o prevs

always @(trigger)
begin
	F_expected_prev = F_expected;
end



// expected F
initial
begin
	F_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or A3_expected or A3 or A4_expected or A4 or A5_expected or A5 or A6_expected or A6 or A7_expected or A7 or F_expected or F or Y0_expected or Y0 or Y1_expected or Y1 or Y2_expected or Y2 or Y3_expected or Y3 or Y4_expected or Y4 or Y5_expected or Y5 or Y6_expected or Y6 or Y7_expected or Y7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected A3 = %b | expected A4 = %b | expected A5 = %b | expected A6 = %b | expected A7 = %b | expected F = %b | expected Y0 = %b | expected Y1 = %b | expected Y2 = %b | expected Y3 = %b | expected Y4 = %b | expected Y5 = %b | expected Y6 = %b | expected Y7 = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,A3_expected_prev,A4_expected_prev,A5_expected_prev,A6_expected_prev,A7_expected_prev,F_expected_prev,Y0_expected_prev,Y1_expected_prev,Y2_expected_prev,Y3_expected_prev,Y4_expected_prev,Y5_expected_prev,Y6_expected_prev,Y7_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real A3 = %b | real A4 = %b | real A5 = %b | real A6 = %b | real A7 = %b | real F = %b | real Y0 = %b | real Y1 = %b | real Y2 = %b | real Y3 = %b | real Y4 = %b | real Y5 = %b | real Y6 = %b | real Y7 = %b | ",A0_prev,A1_prev,A2_prev,A3_prev,A4_prev,A5_prev,A6_prev,A7_prev,F_prev,Y0_prev,Y1_prev,Y2_prev,Y3_prev,Y4_prev,Y5_prev,Y6_prev,Y7_prev);
`endif
	if (
		( F_expected_prev !== 1'bx ) && ( F_prev !== F_expected_prev )
		&& ((F_expected_prev !== last_F_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_F_exp = F_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Isaev22_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D0;
reg D1;
reg D2;
reg D3;
reg D4;
reg D5;
reg D6;
reg D7;
reg X0;
reg X1;
reg X2;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire A4;
wire A5;
wire A6;
wire A7;
wire F;
wire Y0;
wire Y1;
wire Y2;
wire Y3;
wire Y4;
wire Y5;
wire Y6;
wire Y7;

wire sampler;                             

// assign statements (if any)                          
Isaev22 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.F(F),
	.X0(X0),
	.X1(X1),
	.X2(X2),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.Y5(Y5),
	.Y6(Y6),
	.Y7(Y7)
);

// X0
initial
begin
	repeat(12)
	begin
		X0 = 1'b0;
		X0 = #40000 1'b1;
		# 40000;
	end
	X0 = 1'b0;
end 

// X1
always
begin
	X1 = 1'b0;
	X1 = #20000 1'b1;
	#20000;
end 

// X2
always
begin
	X2 = 1'b0;
	X2 = #10000 1'b1;
	#10000;
end 

// D0
initial
begin
	D0 = 1'b0;
end 

// D1
initial
begin
	D1 = 1'b1;
end 

// D2
initial
begin
	D2 = 1'b0;
end 

// D3
initial
begin
	D3 = 1'b0;
end 

// D4
initial
begin
	D4 = 1'b0;
end 

// D5
initial
begin
	D5 = 1'b0;
end 

// D6
initial
begin
	D6 = 1'b1;
end 

// D7
initial
begin
	D7 = 1'b0;
end 

Isaev22_vlg_sample_tst tb_sample (
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.X0(X0),
	.X1(X1),
	.X2(X2),
	.sampler_tx(sampler)
);

Isaev22_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.F(F),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.Y5(Y5),
	.Y6(Y6),
	.Y7(Y7),
	.sampler_rx(sampler)
);
endmodule

